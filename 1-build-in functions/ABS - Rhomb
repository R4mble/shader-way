uniform vec2 iResolution;

void main() {
  vec2 uv = gl_FragCoord.xy / iResolution.xy;
  uv = uv * 2.0 - 1.0;
  float lt = step(uv.y, uv.x+1.0);
  float lb = step(-uv.x-1.0, uv.y);
  float rt = step(uv.y, -uv.x+1.0);
  float rb = step(uv.x-1.0, uv.y);

  gl_FragColor = vec4(lt * lb * rt * rb, 0.0, 0.0, 1.0);
}

// 还有一种解法: 曼哈顿距离
void main() {
  vec2 uv = gl_FragCoord.xy / iResolution.xy;
  uv -= 0.5;
  
  gl_FragColor = vec4(step(abs(uv.x) + abs(uv.y), 0.5), 0.0, 0.0, 1.0);
}

// 当然可以画个圆
void main() {
  vec2 uv = gl_FragCoord.xy / iResolution.xy;
  uv -= 0.5;  // 中心化
  
  // 缩放 uv.y，使得 x 和 y 比例一致
  uv.x *= iResolution.x / iResolution.y;

  // 计算欧几里得距离
  float t = length(uv);  // 到中心的距离
  
  // 判断是否在半径范围内
  t = 1.0 - step(0.5, t);
  
  gl_FragColor = vec4(t, 0.0, 0.0, 1.0);  // 画圆形
}
